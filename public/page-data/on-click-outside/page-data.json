{"componentChunkName":"component---src-templates-directory-js","path":"/on-click-outside/","result":{"data":{"mdx":{"frontmatter":{"title":"useOnClickOutside","date":"2020 May 15th","category":"react"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useOnClickOutside\",\n  \"date\": \"2020-05-15T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"react\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This hook allows you to detect clicks outside of a specified element. In the example below we use it to close a modal when any element outside of the modal is clicked. By abstracting this logic out into a hook we can easily use it across all of our components that need this kind of functionality (dropdown menus, tooltips, etc).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { useState, useEffect, useRef } from 'react';\\n\\n// Usage\\nfunction App() {\\n  // Create a ref that we add to the element for which we want to detect outside clicks\\n  const ref = useRef();\\n  // State for our modal\\n  const [isModalOpen, setModalOpen] = useState(false);\\n  // Call hook passing in the ref and a function to call on outside click\\n  useOnClickOutside(ref, () => setModalOpen(false));\\n\\n  return (\\n    <div>\\n      {isModalOpen ? (\\n        <div ref={ref}>\\n          \\uD83D\\uDC4B Hey, I'm a modal. Click anywhere outside of me to close.\\n        </div>\\n      ) : (\\n        <button onClick={() => setModalOpen(true)}>Open Modal</button>\\n      )}\\n    </div>\\n  );\\n}\\n\\n// Hook\\nfunction useOnClickOutside(ref, handler) {\\n  useEffect(\\n    () => {\\n      const listener = event => {\\n        // Do nothing if clicking ref's element or descendent elements\\n        if (!ref.current || ref.current.contains(event.target)) {\\n          return;\\n        }\\n\\n        handler(event);\\n      };\\n\\n      document.addEventListener('mousedown', listener);\\n      document.addEventListener('touchstart', listener);\\n\\n      return () => {\\n        document.removeEventListener('mousedown', listener);\\n        document.removeEventListener('touchstart', listener);\\n      };\\n    },\\n    // Add ref and handler to effect dependencies\\n    // It's worth noting that because passed in handler is a new ...\\n    // ... function on every render that will cause this effect ...\\n    // ... callback/cleanup to run every render. It's not a big deal ...\\n    // ... but to optimize you can wrap handler in useCallback before ...\\n    // ... passing it into this hook.\\n    [ref, handler]\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"This hook allows you to detect clicks outside of a specified element. In the example below we use it to close a modal when any elementâ€¦","fields":{"slug":"/on-click-outside/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/master/content/react/on-click-outside.mdx"}}},"pageContext":{"slug":"/on-click-outside/","previous":{"id":"4f8f3442-853e-5de9-b0a7-e1a8e4b15884","excerpt":"Disable Admin Bar.","frontmatter":{"title":"WP | Disable Admin Bar","date":"2020-04-16T00:00:00.000Z","category":"cms"},"fields":{"slug":"/disable-admin-bar/"}},"next":{"id":"0cb7dd91-c05e-592d-870c-9ba1369d70b8","excerpt":"Box shadow text.","frontmatter":{"title":"Box Shadow","date":"2020-12-07T00:00:00.000Z","category":"css"},"fields":{"slug":"/box-shadow/"}}}},"staticQueryHashes":["4278130389"]}