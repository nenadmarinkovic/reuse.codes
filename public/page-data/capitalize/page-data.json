{"componentChunkName":"component---src-templates-directory-js","path":"/capitalize/","result":{"data":{"mdx":{"frontmatter":{"title":"Capitalize First Letter","date":"2020 November 7th","category":"javascript"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Capitalize First Letter\",\n  \"date\": \"2020-11-07T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"javascript\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Capitalizes the first letter of a string.\"), mdx(\"p\", null, \"Use array destructuring and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String.prototype.toUpperCase()\"), \" to capitalize the first letter of the string.\\nUse \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Array.prototype.join('')\"), \" to combine the capitalized \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"first\"), \" with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"...rest\"), \" of the characters.\\nOmit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lowerRest\"), \" argument to keep the rest of the string intact, or set it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" to convert to lowercase.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const capitalize = ([first, ...rest], lowerRest = false) =>\\n  first.toUpperCase() +\\n  (lowerRest ? rest.join('').toLowerCase() : rest.join(''));\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"capitalize('fooBar'); // 'FooBar'\\ncapitalize('fooBar', true); // 'Foobar'\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Capitalizes the first letter of a string. Use array destructuring and  String.prototype.toUpperCase()  to capitalize the first letter of the…","fields":{"slug":"/capitalize/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/master/content/javascript/capitalize.mdx"}}},"pageContext":{"slug":"/capitalize/","previous":{"id":"45690c1a-ac6d-5a62-a40a-d0be72b489d2","excerpt":"Checks if all elements in an array are equal. Use  Array.prototype.every()  to check if all the elements of the array are the same as the first one.\nElements in the array are compared using the strict comparison operator, which does not account for…","frontmatter":{"title":"Are elements equal?","date":"2020-11-07T00:00:00.000Z","category":"javascript"},"fields":{"slug":"/are-equal/"}},"next":{"id":"83901cd2-edd8-5b3f-a2a2-0e0ac7602d15","excerpt":"Calculates the date of  n  days from the given date, returning its string representation. Use  new Date()  to create a date object from the first argument. Use  Date.prototype.getDate()  and  Date.prototype.setDate()  to add  n  days to the given…","frontmatter":{"title":"Add Days To Date","date":"2020-11-07T00:00:00.000Z","category":"javascript"},"fields":{"slug":"/add-days-to-date/"}}}},"staticQueryHashes":["4278130389"]}