{"componentChunkName":"component---src-templates-directory-js","path":"/lists-and-keys/","result":{"data":{"mdx":{"frontmatter":{"title":"Lists and Keys","date":"2020 January 17th","category":"react"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lists and Keys\",\n  \"date\": \"2020-01-17T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"react\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Use .map() to convert lists of data (arrays) into lists of elements:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const people = [\\\"John\\\", \\\"Bob\\\", \\\"Fred\\\"];\\nconst peopleList = people.map(person => <p>{person}</p>);\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function App() {\\n  const people = ['John', 'Bob', 'Fred'];\\n  // can interpolate returned list of elements in {}\\n  return (\\n    <ul>\\n      {/* we're passing each array element as props */}\\n      {people.map(person => <Person name={person} />}\\n    </ul>\\n  );\\n}\\n//\\nfunction Person({ name }) {\\n  // gets 'name' prop using object destructuring\\n  return <p>this person's name is: {name}</p>;\\n}\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Use .map() to convert lists of data (arrays) into lists of elements:","fields":{"slug":"/lists-and-keys/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/master/content/react/lists-and-keys.mdx"}}},"pageContext":{"slug":"/lists-and-keys/","previous":{"id":"249abf44-9e14-59a3-986a-bb068dbbfecd","excerpt":"Renders a tree view of a JSON object or array with collapsible content.","frontmatter":{"title":"TreeView","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/tree-view/"}},"next":{"id":"829b2985-4748-5cfe-8070-4503d7cec73a","excerpt":"A custom Document is commonly used to augment your application's  <html>  and  <body>  tags. This is necessary because Next.js pages skip the definition of the surrounding document's markup. To override the default Document, create the file  ./pagesâ€¦","frontmatter":{"title":"Custom Nextjs Document","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/custom-document/"}}}},"staticQueryHashes":["4278130389"]}