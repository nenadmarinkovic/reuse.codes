{"componentChunkName":"component---src-templates-directory-js","path":"/collapse/","result":{"data":{"mdx":{"frontmatter":{"title":"Collapse","date":"2020 January 17th","category":"react"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Collapse\",\n  \"date\": \"2020-01-17T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"react\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Renders a component with collapsible content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".collapse-button {\\n  display: block;\\n  width: 100%;\\n}\\n\\n.collapse-content.collapsed {\\n  display: none;\\n}\\n\\n.collapsed-content.expanded {\\n  display: block;\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Collapse = ({ collapsed, children }) => {\\n  const [isCollapsed, setIsCollapsed] = React.useState(collapsed);\\n\\n  return (\\n    <>\\n      <button\\n        className=\\\"collapse-button\\\"\\n        onClick={() => setIsCollapsed(!isCollapsed)}\\n      >\\n        {isCollapsed ? 'Show' : 'Hide'} content\\n      </button>\\n      <div\\n        className={`collapse-content ${isCollapsed ? 'collapsed' : 'expanded'}`}\\n        aria-expanded={isCollapsed}\\n      >\\n        {children}\\n      </div>\\n    </>\\n  );\\n};\\n//\\nReactDOM.render(\\n  <Collapse>\\n    <h1>This is a collapse</h1>\\n    <p>Hello world!</p>\\n  </Collapse>,\\n  document.getElementById('root')\\n);\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Renders a component with collapsible content.","fields":{"slug":"/collapse/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/master/content/react/collapse.mdx"}}},"pageContext":{"slug":"/collapse/","previous":{"id":"01378af4-2a03-5a1e-ad05-f47382e5bdd3","excerpt":"Use .map() to convert lists of data (arrays) into lists of elements:","frontmatter":{"title":"Lists and Keys","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/lists-and-keys/"}},"next":{"id":"86790ae2-3288-5d82-8e89-07e6a1447d2d","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and its setter.\nCreate a function that toggles the value of the value state variable and memoize it, using theâ€¦","frontmatter":{"title":"Use Toggler","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/use-toggler/"}}}},"staticQueryHashes":["4278130389"]}