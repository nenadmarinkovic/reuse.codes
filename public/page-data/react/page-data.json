{"componentChunkName":"component---src-pages-react-js","path":"/react/","result":{"data":{"allMdx":{"nodes":[{"id":"155de9d0-ff6d-5037-8c87-cace7ad38306","excerpt":"Renders an accordion menu with multiple collapsible content elements.","frontmatter":{"title":"React Accordion","date":"2020 November 17th","category":"react"},"fields":{"slug":"/accordion/"}},{"id":"88abf2d1-6173-5a0d-8bbd-cc1e6642438a","excerpt":"Renders a component with collapsible content.","frontmatter":{"title":"Collapse","date":"2020 January 17th","category":"react"},"fields":{"slug":"/collapse/"}},{"id":"da4b84b0-c52d-5a4a-83a7-c932bf675cea","excerpt":"A custom Document is commonly used to augment your application's  <html>  and  <body>  tags. This is necessary because Next.js pages skip the definition of the surrounding document's markup. To override the default Document, create the file  ./pages…","frontmatter":{"title":"Custom Nextjs Document","date":"2020 January 17th","category":"react"},"fields":{"slug":"/custom-document/"}},{"id":"d10e57b9-bb1d-5a06-bc9e-ed7521f221dc","excerpt":"Use .map() to convert lists of data (arrays) into lists of elements:","frontmatter":{"title":"Lists and Keys","date":"2020 January 17th","category":"react"},"fields":{"slug":"/lists-and-keys/"}},{"id":"40f76a5b-32f7-5e4b-bc0c-846880df8d00","excerpt":"Renders a tree view of a JSON object or array with collapsible content.","frontmatter":{"title":"TreeView","date":"2020 January 17th","category":"react"},"fields":{"slug":"/tree-view/"}},{"id":"8bd6674b-fd1f-5b19-b9f3-9fa38194c82a","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and its setter.\nCreate a function that toggles the value of the value state variable and memoize it, using the…","frontmatter":{"title":"Use Toggler","date":"2020 January 17th","category":"react"},"fields":{"slug":"/use-toggler/"}},{"id":"ca0ba338-7708-5390-87ac-90d05e0befdd","excerpt":"Create a custom hook that takes a url and options.\nUse the useState() hook to initialize the response and error state variables.\nUse the useEffect() hook to anychronously call fetch() and update the state variables accordingly.\nReturn an object…","frontmatter":{"title":"useFetch","date":"2020 January 17th","category":"react"},"fields":{"slug":"/use-fetch/"}}]}},"pageContext":{}},"staticQueryHashes":["3678754960","4278130389"]}