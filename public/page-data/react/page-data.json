{"componentChunkName":"component---src-pages-react-js","path":"/react/","result":{"data":{"allMdx":{"nodes":[{"id":"e072f2d7-1ef3-539c-bf23-4e6429761223","excerpt":"Renders an accordion menu with multiple collapsible content elements.","frontmatter":{"title":"React Accordion","date":"2020 November 17th","category":"react"},"fields":{"slug":"/accordion/"}},{"id":"75433b7b-bca0-5524-af57-1274defd24e6","excerpt":"A custom Document is commonly used to augment your application's  <html>  and  <body>  tags. This is necessary because Next.js pages skip the definition of the surrounding document's markup. To override the default Document, create the file  ./pages…","frontmatter":{"title":"Custom Nextjs Document","date":"2020 January 17th","category":"react"},"fields":{"slug":"/custom-document/"}},{"id":"86790ae2-3288-5d82-8e89-07e6a1447d2d","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and its setter.\nCreate a function that toggles the value of the value state variable and memoize it, using the…","frontmatter":{"title":"Use Toggler","date":"2020 January 17th","category":"react"},"fields":{"slug":"/use-toggler/"}},{"id":"8e017e80-9a43-58af-9e3d-501edd4a632a","excerpt":"Renders a component with collapsible content.","frontmatter":{"title":"Collapse","date":"2020 January 17th","category":"react"},"fields":{"slug":"/collapse/"}},{"id":"01378af4-2a03-5a1e-ad05-f47382e5bdd3","excerpt":"Use .map() to convert lists of data (arrays) into lists of elements:","frontmatter":{"title":"Lists and Keys","date":"2020 January 17th","category":"react"},"fields":{"slug":"/lists-and-keys/"}},{"id":"d8fc13cf-006e-5372-bc3d-c3579b95794a","excerpt":"Renders a tree view of a JSON object or array with collapsible content.","frontmatter":{"title":"TreeView","date":"2020 January 17th","category":"react"},"fields":{"slug":"/tree-view/"}},{"id":"f0b7be30-162d-581c-ba69-098f1bb46171","excerpt":"Create a custom hook that takes a url and options.\nUse the useState() hook to initialize the response and error state variables.\nUse the useEffect() hook to anychronously call fetch() and update the state variables accordingly.\nReturn an object…","frontmatter":{"title":"useFetch","date":"2020 January 17th","category":"react"},"fields":{"slug":"/use-fetch/"}}]}},"pageContext":{}},"staticQueryHashes":["3678754960","4278130389"]}