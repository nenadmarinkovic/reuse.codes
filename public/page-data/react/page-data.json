{"componentChunkName":"component---src-pages-react-js","path":"/react/","result":{"data":{"allMdx":{"nodes":[{"id":"67f685a8-d1a7-5f31-8b57-d42862cb9eb7","excerpt":"Renders an accordion menu with multiple collapsible content elements.","frontmatter":{"title":"React Accordion","date":"2020 November 17th","category":"react"},"fields":{"slug":"/accordion/"}},{"id":"4695cd54-c492-5c63-910c-fb9adeabe90f","excerpt":"Renders a component with collapsible content.","frontmatter":{"title":"Collapse","date":"2020 January 17th","category":"react"},"fields":{"slug":"/collapse/"}},{"id":"829b2985-4748-5cfe-8070-4503d7cec73a","excerpt":"A custom Document is commonly used to augment your application's  <html>  and  <body>  tags. This is necessary because Next.js pages skip the definition of the surrounding document's markup. To override the default Document, create the file  ./pages…","frontmatter":{"title":"Custom Nextjs Document","date":"2020 January 17th","category":"react"},"fields":{"slug":"/custom-document/"}},{"id":"6bcc02e9-c201-5e86-bb35-9952d7f65ba6","excerpt":"Use .map() to convert lists of data (arrays) into lists of elements:","frontmatter":{"title":"Lists and Keys","date":"2020 January 17th","category":"react"},"fields":{"slug":"/lists-and-keys/"}},{"id":"249abf44-9e14-59a3-986a-bb068dbbfecd","excerpt":"Renders a tree view of a JSON object or array with collapsible content.","frontmatter":{"title":"TreeView","date":"2020 January 17th","category":"react"},"fields":{"slug":"/tree-view/"}},{"id":"21cae9c7-85e2-59c4-a3f3-0e8454f091bb","excerpt":"Create a custom hook that takes a url and options.\nUse the useState() hook to initialize the response and error state variables.\nUse the useEffect() hook to anychronously call fetch() and update the state variables accordingly.\nReturn an object…","frontmatter":{"title":"useFetch","date":"2020 January 17th","category":"react"},"fields":{"slug":"/use-fetch/"}},{"id":"a383765d-b256-553b-bd27-30ea62fdd281","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and its setter.\nCreate a function that toggles the value of the value state variable and memoize it, using the…","frontmatter":{"title":"Use Toggler","date":"2020 January 17th","category":"react"},"fields":{"slug":"/use-toggler/"}}]}},"pageContext":{}},"staticQueryHashes":["3678754960","4278130389"]}