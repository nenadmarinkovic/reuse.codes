{"componentChunkName":"component---src-templates-directory-js","path":"/use-fetch/","result":{"data":{"mdx":{"frontmatter":{"title":"useFetch","date":"2020 January 17th","category":"react"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"useFetch\",\n  \"date\": \"2020-01-17T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"react\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Create a custom hook that takes a url and options.\\nUse the useState() hook to initialize the response and error state variables.\\nUse the useEffect() hook to anychronously call fetch() and update the state variables accordingly.\\nReturn an object containting the response and error state variables.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const useFetch = (url, options) => {\\n  const [response, setResponse] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n\\n  React.useEffect(() => {\\n    const fetchData = async () => {\\n      try {\\n        const res = await fetch(url, options);\\n        const json = await res.json();\\n        setResponse(json);\\n      } catch (error) {\\n        setError(error);\\n      }\\n    };\\n    fetchData();\\n  }, []);\\n\\n  return { response, error };\\n};\\n//\\nconst ImageFetch = props => {\\n  const res = useFetch('https://dog.ceo/api/breeds/image/random', {});\\n  if (!res.response) {\\n    return <div>Loading...</div>;\\n  }\\n  const imageUrl = res.response.message;\\n  return (\\n    <div>\\n      <img src={imageUrl} alt=\\\"avatar\\\" width={400} height=\\\"auto\\\" />\\n    </div>\\n  );\\n};\\n\\nReactDOM.render(<ImageFetch />, document.getElementById('root'));\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Create a custom hook that takes a url and options.\nUse the useState() hook to initialize the response and error state variables.\nUse the…","fields":{"slug":"/use-fetch/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/master/content/react/use-fetch.mdx"}}},"pageContext":{"slug":"/use-fetch/","previous":{"id":"4fb0889a-ed18-57a1-aa65-43e984ab786e","excerpt":"Determines if the current runtime environment is Node.js.","frontmatter":{"title":"Is Node?","date":"2020-01-17T00:00:00.000Z","category":"node"},"fields":{"slug":"/is-node/"}},"next":{"id":"8bd6674b-fd1f-5b19-b9f3-9fa38194c82a","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and its setter.\nCreate a function that toggles the value of the value state variable and memoize it, using the…","frontmatter":{"title":"Use Toggler","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/use-toggler/"}}}},"staticQueryHashes":["4278130389"]}