{"componentChunkName":"component---src-templates-directory-js","path":"/use-toggler copy/","result":{"data":{"mdx":{"frontmatter":{"title":"Use Toggler","date":"2020 January 17th","category":"react"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Use Toggler\",\n  \"date\": \"2020-01-17T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"react\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Provides a boolean state variable that can be toggled between its two states.\"), mdx(\"p\", null, \"Use the useState() hook to create the value state variable and its setter.\\nCreate a function that toggles the value of the value state variable and memoize it, using the useCallback() hook.\\nReturn the value state variable and the memoized toggler function.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const useToggler = initialState => {\\n  const [value, setValue] = React.useState(initialState);\\n\\n  const toggleValue = React.useCallback(() => setValue(prev => !prev), []);\\n\\n  return [value, toggleValue];\\n};\\n\\n// Example\\n\\nconst Switch = () => {\\n  const [val, toggleVal] = useToggler(false);\\n  return <button onClick={toggleVal}>{val ? 'ON' : 'OFF'}</button>;\\n};\\nReactDOM.render(<Switch />, document.getElementById('root'));\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and…","fields":{"slug":"/use-toggler copy/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/master/content/react/use-toggler copy.mdx"}}},"pageContext":{"slug":"/use-toggler copy/","previous":{"id":"777a4663-b431-5283-b440-650cc595f3d6","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and its setter.\nCreate a function that toggles the value of the value state variable and memoize it, using the…","frontmatter":{"title":"Use Toggler","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/use-toggler copy 2/"}},"next":{"id":"86790ae2-3288-5d82-8e89-07e6a1447d2d","excerpt":"Provides a boolean state variable that can be toggled between its two states. Use the useState() hook to create the value state variable and its setter.\nCreate a function that toggles the value of the value state variable and memoize it, using the…","frontmatter":{"title":"Use Toggler","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/use-toggler/"}}}},"staticQueryHashes":["4278130389"]}