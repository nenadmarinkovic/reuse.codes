{"componentChunkName":"component---src-templates-directory-js","path":"/tree-view/","result":{"data":{"mdx":{"frontmatter":{"title":"TreeView","date":"2020 January 17th","category":"react"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TreeView\",\n  \"date\": \"2020-01-17T00:00:00.000Z\",\n  \"published\": true,\n  \"category\": \"react\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Renders a tree view of a JSON object or array with collapsible content.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".tree-element {\\n  margin: 0 0 0 4px;\\n  position: relative;\\n}\\n\\n.tree-element.is-child {\\n  margin-left: 16px;\\n}\\n\\ndiv.tree-element:before {\\n  content: '';\\n  position: absolute;\\n  top: 24px;\\n  left: 1px;\\n  height: calc(100% - 48px);\\n  border-left: 1px solid gray;\\n}\\n\\np.tree-element {\\n  margin-left: 16px;\\n}\\n\\n.toggler {\\n  position: absolute;\\n  top: 10px;\\n  left: 0px;\\n  width: 0;\\n  height: 0;\\n  border-top: 4px solid transparent;\\n  border-bottom: 4px solid transparent;\\n  border-left: 5px solid gray;\\n  cursor: pointer;\\n}\\n\\n.toggler.closed {\\n  transform: rotate(90deg);\\n}\\n\\n.collapsed {\\n  display: none;\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const TreeView = ({\\n  data,\\n  toggled = true,\\n  name = null,\\n  isLast = true,\\n  isChildElement = false,\\n  isParentToggled = true\\n}) => {\\n  const [isToggled, setIsToggled] = React.useState(toggled);\\n  const isDataArray = Array.isArray(data);\\n\\n  return (\\n    <div\\n      className={`tree-element ${isParentToggled && 'collapsed'} ${\\n        isChildElement && 'is-child'\\n      }`}\\n    >\\n      <span\\n        className={isToggled ? 'toggler' : 'toggler closed'}\\n        onClick={() => setIsToggled(!isToggled)}\\n      />\\n      {name ? <strong>&nbsp;&nbsp;{name}: </strong> : <span>&nbsp;&nbsp;</span>}\\n      {isDataArray ? '[' : '{'}\\n      {!isToggled && '...'}\\n      {Object.keys(data).map((v, i, a) =>\\n        typeof data[v] === 'object' ? (\\n          <TreeView\\n            key={`${name}-${v}-${i}`}\\n            data={data[v]}\\n            isLast={i === a.length - 1}\\n            name={isDataArray ? null : v}\\n            isChildElement\\n            isParentToggled={isParentToggled && isToggled}\\n          />\\n        ) : (\\n          <p\\n            key={`${name}-${v}-${i}`}\\n            className={isToggled ? 'tree-element' : 'tree-element collapsed'}\\n          >\\n            {isDataArray ? '' : <strong>{v}: </strong>}\\n            {data[v]}\\n            {i === a.length - 1 ? '' : ','}\\n          </p>\\n        )\\n      )}\\n      {isDataArray ? ']' : '}'}\\n      {!isLast ? ',' : ''}\\n    </div>\\n  );\\n};\\n//\\nconst data = {\\n  lorem: {\\n    ipsum: 'dolor sit',\\n    amet: {\\n      consectetur: 'adipiscing',\\n      elit: [\\n        'duis',\\n        'vitae',\\n        {\\n          semper: 'orci'\\n        },\\n        {\\n          est: 'sed ornare'\\n        },\\n        'etiam',\\n        ['laoreet', 'tincidunt'],\\n        ['vestibulum', 'ante']\\n      ]\\n    },\\n    ipsum: 'primis'\\n  }\\n};\\nReactDOM.render(\\n  <TreeView data={data} name=\\\"data\\\" />,\\n  document.getElementById('root')\\n);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Renders a tree view of a JSON object or array with collapsible content.","fields":{"slug":"/tree-view/","editLink":"https://github.com/nenadmarinkovic/reuse.codes/edit/master/content/react/tree-view.mdx"}}},"pageContext":{"slug":"/tree-view/","previous":{"id":"21cae9c7-85e2-59c4-a3f3-0e8454f091bb","excerpt":"Create a custom hook that takes a url and options.\nUse the useState() hook to initialize the response and error state variables.\nUse the useEffect() hook to anychronously call fetch() and update the state variables accordingly.\nReturn an objectâ€¦","frontmatter":{"title":"useFetch","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/use-fetch/"}},"next":{"id":"6bcc02e9-c201-5e86-bb35-9952d7f65ba6","excerpt":"Use .map() to convert lists of data (arrays) into lists of elements:","frontmatter":{"title":"Lists and Keys","date":"2020-01-17T00:00:00.000Z","category":"react"},"fields":{"slug":"/lists-and-keys/"}}}},"staticQueryHashes":["4278130389"]}